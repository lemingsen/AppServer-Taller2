swagger: '2.0'
info:
  description: Comprame App Server
  version: 1.0.0
  title: Comprame App Server API
host: app-server-taller2.herokuapp.com
basePath: /
tags:
  - name: user
    description: User related operations
  - name: products
    description: Product related operations
  - name: orders
    description: Orders related operations
  - name: payment methods
    description: Payment methods related operations
  - name: server
schemes:
  - https
  - http
paths:
  /ping:
    get:
      tags:
        - server
      summary: ping
      description: pings the server
      operationId: ping
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
  /user/auth:
    post:
      tags:
        - user
      summary: User login
      description: Logs a user into the system
      operationId: userLogin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Firebase id token
          required: true
          schema:
            $ref: '#/definitions/Firebase'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Token'
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: not found
  /user/register:
    post:
      tags:
        - user
      summary: Register user
      description: Registers a user into the system
      operationId: register
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: user object
          required: true
          schema:
            $ref: '#/definitions/UserRegisterInput'
      responses:
        '200':
          description: success
        '400':
          description: bad request
        '409':
          description: user already exists
  /user/profile:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: Get user profile
      description: Returns the current user profile
      operationId: getProfile
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '401':
          description: unauthorized
        '404':
          description: user not found
        '422':
          description: invalid token payload
    put:
      security:
        - Bearer: []
      tags:
        - user
      summary: Modify user profile
      description: Modifies current user profile
      operationId: modifyProfile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: user object
          required: true
          schema:
            $ref: '#/definitions/UserRegisterInput'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: user not found
        '422':
          description: invalid token payload
  /products:
    get:
      security:
        - Bearer: []
      tags:
        - products
      summary: Get products
      description: Returns the matching products with the filters sent. If no filters are sent, it returns all the available products.
      operationId: getProducts
      produces:
        - application/json
      parameters:
        - in: query
          name: text
          type: string
          description: Text to lookup in name and description of the product. Can have several text parameters.
        - in: query
          name: units
          type: integer
          description: Minimum units available to show the product.
        - in: query
          name: min_price
          type: number
          format: float
          description: Minimum price of the product.
        - in: query
          name: max_price
          type: number
          format: float
          description: Minimum price of the product.
        - in: query
          name: longitude
          type: number
          format: float
          description: Buyer longitude.
        - in: query
          name: latitude
          type: number
          format: float
          description: Buyer latitude.
        - in: query
          name: min_distance
          type: number
          format: float
          description: Minimum distance in meters from buyer.
        - in: query
          name: max_distance
          type: number
          format: float
          description: Maximum distance in meters from buyer.
        - in: query
          name: categories
          type: string
          description: Product category. Can have sevetal categories parameters.
        - in: query
          name: payment_methods
          type: string
          description: Products payment methods. Can have sevetal payment methods parameters.
        - in: query
          name: seller
          type: string
          description: Seller uid.          
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProductsQueryOutput'
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: user not found
        '422':
          description: invalid token payload
    post:
      security:
        - Bearer: []
      tags:
        - products
      summary: Add product
      description: Adds a product for selling
      operationId: addProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: product
          required: true
          schema:
            $ref: '#/definitions/ProductInput'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '401':
          description: unauthorized
        '422':
          description: invalid token payload
  /products/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - products
      summary: Get product
      description: Returns the product with the id passed
      operationId: getProduct
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: product not found
        '422':
          description: invalid token payload
    delete:
      security:
        - Bearer: []
      tags:
        - products
      summary: Delete product
      description: Deletes the product with the id passed
      operationId: deleteProduct
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: not valid product id
        '401':
          description: unauthorized
        '404':
          description: product not found
        '422':
          description: invalid token payload
  /products/{id}/questions:
    post:
        security:
          - Bearer: []
        tags:
          - products
        summary: Add question about a product
        description: Adds a a question about product with product id {id}. Returns the updated product.
        operationId: addQuestion
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: id
            in: path
            description: product id
            required: true
            type: string
          - in: body
            name: body
            description: question object
            required: true
            schema:
              $ref: '#/definitions/QuestionInput'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/Product'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
  /products/{id}/questions/{question_id}/answers:
    post:
        security:
          - Bearer: []
        tags:
          - products
        summary: Adds an answer to a question about a product
        description: Adds an answer to a question with id {question_id} about a product with product id {product_id}. Returns the updated product.
        operationId: addAnswer
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: id
            in: path
            description: product id
            required: true
            type: string
          - name: question_id
            in: path
            description: question id
            required: true
            type: string
          - in: body
            name: body
            description: answer object
            required: true
            schema:
              $ref: '#/definitions/AnswerInput'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/Product'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
  /products/categories:
    post:
        tags:
          - products
        summary: Adds a product category.
        description: Adds a product category.
        operationId: addCategory
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - in: body
            name: body
            description: category
            required: true
            schema:
              $ref: '#/definitions/CategoryInput'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/Category'
          '400':
            description: bad request
          '404':
            description: product not found
    get:
      security:
        - Bearer: []
      tags:
        - products
      summary: Get product categories
      description: Gets all available product categories.
      operationId: getCategories
      produces:
        - application/json
      responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/CategoryArray'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
  /products/categories/{id}:
    delete:
      tags:
        - products
      summary: Delete product category
      description: Deletes the product category with the id sent
      operationId: deleteCategory
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product category id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: not valid product category id
        '404':
          description: product category not found
    put:
      tags:
        - products
      summary: Modifies a product category
      description: Modifies the product category with the id sent
      operationId: modifyCategory
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product category id
          required: true
          type: string
        - in: body
          name: body
          description: category
          required: true
          schema:
            $ref: '#/definitions/CategoryInput'   
      responses:
        '200':
          description: successful operation
        '400':
          description: not valid product category id
        '404':
          description: product category not found
  /orders:
    post:
        security:
          - Bearer: []
        tags:
          - orders
        summary: Creates a new order
        description: Creates a new order buying a product
        operationId: newOrder
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - in: body
            name: body
            description: category
            required: true
            schema:
              $ref: '#/definitions/OrderInput'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/NewOrderOutput'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
  /orders/sales:
    get:
      security:
        - Bearer: []
      tags:
        - orders
      summary: Get user's sales
      description: Gets all the sales done by the user.
      operationId: getSales
      produces:
        - application/json
      responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/MySalesPurchases'
          '401':
            description: unauthorized
          '422':
            description: invalid token payload
  /orders/purchases:
    get:
      security:
        - Bearer: []
      tags:
        - orders
      summary: Get user's purchases
      description: Gets all the purchases done by the user.
      operationId: getPurchases
      produces:
        - application/json
      responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/MySalesPurchases'
          '401':
            description: unauthorized
          '422':
            description: invalid token payload
  /orders/tracking/{tracking_number}:
    get:
      security:
        - Bearer: []
      tags:
        - orders
      summary: Gets the order status identified by the tracking number
      description: Gets the order status
      operationId: getTracking
      produces:
        - application/json
      parameters:
        - name: tracking_number
          in: path
          description: order tracking_number
          required: true
          type: integer
      responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/Order'
          '401':
            description: unauthorized
          '404':
            description: order not found.
          '422':
            description: invalid token payload
  /orders/shipping/estimate/{tracking_number}:
    get:
      security:
        - Bearer: []
      tags:
        - orders
      summary: Gets an estimated shipping cost
      description: Gets an estimated shipping cost for the order
      operationId: getShippingEstimate
      produces:
        - application/json
      parameters:
        - name: tracking_number
          in: path
          description: order tracking_number
          required: true
          type: integer
      responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/ShippingEstimateCostOutput'
          '401':
            description: unauthorized
          '404':
            description: order not found.
          '422':
            description: invalid token payload
  /orders/ratings/{tracking_number}:
    post:
        security:
          - Bearer: []
        tags:
          - orders
        summary: Rates the purchase
        description: Rates the purchase after product has been delivered.
        operationId: rateOrder
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: tracking_number
            in: path
            description: order tracking_number
            required: true
            type: integer
          - in: body
            name: rate
            description: must be 'POSITIVE', 'NEGATIVE' or 'NEUTRAL'
            required: true
            schema:
              $ref: '#/definitions/RatingInput'
        responses:
          '200':
            description: successful operation
          '400':
            description: bad request
          '401':
            description: unauthorized
          '403':
            description: forbidden operation
          '422':
            description: invalid token payload
  /payments:
    get:
      tags:
        - payment methods
      summary: Get payment methods
      description: Gets all available payment methods.
      operationId: getPaymentMethods
      produces:
        - application/json
      responses:
          '200':
            description: successful operation
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Token:
    type: object
    properties:
      token:
        type: string
  Firebase:
    type: object
    properties:
      idToken:
        type: string
  UserRegisterInput:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      email:
        type: string
      google:
        type: string
      facebook:
        type: string
      uid:
        type: string
      photo:
        type: string
      location:
        $ref: '#/definitions/Location'
  User:
    allOf:
      - $ref: '#/definitions/UserRegisterInput'
    type: object
    properties:
      _id:
        type: string
      last_login:
        type: string
      points:
        type: integer
      purchases:
        type: integer
  Location:
    type: object
    properties:
      longitude: 
        type: number
        format: float
      latitude:
        type: number
        format: float
  Product:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      description:
        type: string
      seller:
        type: string
      units:
        type: integer
        format: int64
      price:
        type: number
        format: float
      location:
        $ref: '#/definitions/Location'
      categories:
        $ref: '#/definitions/CategoryArray'
      questions:
        $ref: '#/definitions/ArrayOfQuestionsWithAnswers'
      payment_methods:
        $ref: '#/definitions/PaymentMethods'
      pictures:
        type: array
        items:
          type: string
  ProductInput:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      units:
        type: integer
        format: int64
      price:
        type: number
        format: float
      location:
        type: object
        properties:
          longitude: 
            type: number
            format: float
          latitude:
            type: number
            format: float
      categories:
        type: array
        items:
          type: string
      payment_methods:
        type: array
        items:
          type: string
      pictures:
        type: array
        items:
          type: string
  ProductsQueryOutput:
    type: object
    properties:
      count:
        type: integer
      result:
        type: array
        items:
          $ref: '#/definitions/Product'
  QuestionInput:
    type: object
    properties:
      question:
        type: string
  AnswerInput:
    type: object
    properties:
      answer:
        type: string
  Question:
    allOf:
      - $ref: '#/definitions/QuestionInput'
    type: object
    properties:
      datetime:
        type: string
      _id:
        type: string
      uid:
        type: string
  Answer:
    allOf:
      - $ref: '#/definitions/AnswerInput'
    type: object
    properties:
      datetime:
        type: string
      _id:
        type: string
      uid:
        type: string
  QuestionWithAnswer:
    allOf:
      - $ref: '#/definitions/Question'
    type: object
    properties:
      answer:
        $ref: '#/definitions/Answer'
  ArrayOfQuestionsWithAnswers:
    type: array
    items:
      $ref: '#/definitions/QuestionWithAnswer'
  CategoryInput:
    type: object
    properties:
      name:
        type: string
      image:
        type: string
  Category:
    allOf:
      - $ref: '#/definitions/CategoryInput'
    type: object
    properties:
      _id:
        type: string
  CategoryArray:
    type: array
    items:
      $ref: '#/definitions/Category'
  OrderInput:
    type: object
    required:
    - product_id
    - units
    properties:
      product_id:
        type: string
      units:
        type: integer
      payment_info:
        $ref: '#/definitions/PaymentInfo'
  Order:
    allOf:
      - $ref: '#/definitions/OrderInput'
    type: object
    properties:
      _id:
        type: string
      seller:
        type: string
      buyer:
        type: string
      status:
        type: string
      tracking_number:
        type: integer
      total:
        type: number
        format: float
      product_name:
        type: string
      buyer_location:
        $ref: '#/definitions/Location'
      seller_location:
        $ref: '#/definitions/Location'
  PaymentInfo:
    type: object
    required:
    - payment_method
    properties:
      payment_method:
        type: string
      cardholder_name:
        type: string
      card_number:
        type: string
      expiration_date:
        type: string
      security_code:
        type: string  
  NewOrderOutput:
    type: object
    properties:
      order_tracking_number:
        type: string
  MySalesPurchases:
    type: object
    properties:
      count:
        type: integer
      orders:
        type: array
        items:
          $ref: '#/definitions/Order'
  PaymentMethod:
    type: object
    properties:
      name:
        type: string
      type:
        type: integer
      image:
        type: string
  PaymentMethods:
    type: array
    items:
      $ref: '#/definitions/PaymentMethod'
  ShippingEstimateCostOutput:
    type: object
    properties:
      estimated_cost:
        type: number
        format: float
  RatingInput:
    type: object
    properties:
      rate:
        type: string
      
          
