swagger: '2.0'
info:
  description: Comprame App Server
  version: 1.0.0
  title: Comprame App Server API
host: app-server-taller2.herokuapp.com
basePath: /
tags:
  - name: user
    description: User related operations
  - name: products
    description: Product related operations
  - name: orders
    description: Orders related operations
schemes:
  - https
  - http
paths:
  /ping:
    get:
      summary: ping
      description: pings the server
      operationId: ping
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
  /user/auth:
    post:
      tags:
        - user
      summary: User login
      description: Logs a user into the system
      operationId: userLogin
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Firebase id token
          required: true
          schema:
            $ref: '#/definitions/Firebase'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Token'
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: not found
  /user/register:
    post:
      tags:
        - user
      summary: Register user
      description: Registers a user into the system
      operationId: register
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: success
        '400':
          description: bad request
        '409':
          description: user already exists
  /user/profile:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: Get user profile
      description: Returns the current user profile
      operationId: getProfile
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserWithId'
        '401':
          description: unauthorized
        '404':
          description: user not found
        '422':
          description: invalid token payload
    put:
      security:
        - Bearer: []
      tags:
        - user
      summary: Modify user profile
      description: Modifies current user profile
      operationId: modifyProfile
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: user not found
        '422':
          description: invalid token payload
  /products:
    get:
      security:
        - Bearer: []
      tags:
        - products
      summary: Get products
      description: Returns the matching products with the parameters sent. If no parameters are sent, it returns all the available products.
      operationId: getProducts
      produces:
        - application/json
      parameters:
        - in: query
          name: text
          type: string
          description: Text to lookup in name and description of the product. Can have several text parameters.
        - in: query
          name: units
          type: integer
          description: Minimum units available to show the product.
        - in: query
          name: min_price
          type: number
          format: float
          description: Minimum price of the product.
        - in: query
          name: max_price
          type: number
          format: float
          description: Minimum price of the product.
        - in: query
          name: x
          type: number
          format: float
          description: Buyer x coordinate location
        - in: query
          name: y
          type: number
          format: float
          description: Buyer y coordinate location
        - in: query
          name: categories
          type: string
          description: Product category. Can have sevetal categories parameters.
        - in: query
          name: payment_methods
          type: string
          description: Products payment methods. Can have sevetal payment methods parameters.
        - in: query
          name: seller
          type: string
          description: Seller uid.          
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProductsReturn'
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: user not found
        '422':
          description: invalid token payload
    post:
      security:
        - Bearer: []
      tags:
        - products
      summary: Add product
      description: Adds a product for selling
      operationId: addProduct
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: product
          required: true
          schema:
            $ref: '#/definitions/ProductWithoutSeller'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '401':
          description: unauthorized
        '422':
          description: invalid token payload
  /products/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - products
      summary: Get product
      description: Returns the product with the id passed
      operationId: getProduct
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProductReturn'
        '400':
          description: bad request
        '401':
          description: unauthorized
        '404':
          description: product not found
        '422':
          description: invalid token payload
    delete:
      security:
        - Bearer: []
      tags:
        - products
      summary: Delete product
      description: Deletes the product with the id passed
      operationId: deleteProduct
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: not valid product id
        '401':
          description: unauthorized
        '404':
          description: product not found
        '422':
          description: invalid token payload
  /products/{id}/questions:
    post:
        security:
          - Bearer: []
        tags:
          - products
        summary: Add question about a product
        description: Adds a a question about product with product id {id}. Returns the updated product.
        operationId: addQuestion
        produces:
          - application/json
        parameters:
          - name: id
            in: path
            description: product id
            required: true
            type: string
          - in: body
            name: body
            description: question object
            required: true
            schema:
              $ref: '#/definitions/Question'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/Product'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
  /products/{id}/questions/{question_id}/answers:
    post:
        security:
          - Bearer: []
        tags:
          - products
        summary: Adds an answer to a question about a product
        description: Adds an answer to a question with id {question_id} about a product with product id {product_id}. Returns the updated product.
        operationId: addAnswer
        produces:
          - application/json
        parameters:
          - name: id
            in: path
            description: product id
            required: true
            type: string
          - name: question_id
            in: path
            description: question id
            required: true
            type: string
          - in: body
            name: body
            description: answer object
            required: true
            schema:
              $ref: '#/definitions/Answer'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/Product'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
  /products/categories:
    post:
        tags:
          - products
        summary: Adds a product category.
        description: Adds a product category.
        operationId: addCategory
        produces:
          - application/json
        parameters:
          - in: body
            name: body
            description: category
            required: true
            schema:
              $ref: '#/definitions/CategoryInput'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/Category'
          '400':
            description: bad request
          '404':
            description: product not found
    get:
      security:
        - Bearer: []
      tags:
        - products
      summary: Get product categories
      description: Gets all available product categories.
      operationId: getCategories
      produces:
        - application/json
      responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/CategoryArray'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
  /products/categories/{id}:
    delete:
      tags:
        - products
      summary: Delete product category
      description: Deletes the product category with the id sent
      operationId: deleteCategory
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product category id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: not valid product category id
        '404':
          description: product category not found
    put:
      tags:
        - products
      summary: Modifies a product category
      description: Modifies the product category with the id sent
      operationId: modifyCategory
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: product category id
          required: true
          type: string
        - in: body
          name: body
          description: category
          required: true
          schema:
            $ref: '#/definitions/CategoryInput'   
      responses:
        '200':
          description: successful operation
        '400':
          description: not valid product category id
        '404':
          description: product category not found
  /orders:
    post:
        tags:
          - orders
        summary: Creates a new order
        description: Creates a new order buying a product
        operationId: newOrder
        produces:
          - application/json
        parameters:
          - in: body
            name: body
            description: category
            required: true
            schema:
              $ref: '#/definitions/NewOrderInput'
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/NewOrderOutput'
          '400':
            description: bad request
          '401':
            description: unauthorized
          '404':
            description: product not found
          '422':
            description: invalid token payload
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Token:
    type: object
    properties:
      token:
        type: string
  Firebase:
    type: object
    properties:
      idToken:
        type: string
  User:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      email:
        type: string
      google:
        type: string
      facebook:
        type: string
      uid:
        type: string
      photo:
        type: string
  UserWithId:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      surname:
        type: string
      email:
        type: string
      google:
        type: string
      facebook:
        type: string
      uid:
        type: string
      photo:
        type: string
  Product:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      description:
        type: string
      seller:
        type: string
      units:
        type: integer
        format: int64
      price:
        type: number
        format: float
      location:
        type: object
        properties:
          x: 
            type: number
            format: float
          y:
            type: number
            format: float
      categories:
        type: array
        items:
          type: string
      questions:
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
            datetime:
              type: string
            question:
              type: string
            uid:
              type: string
            answers:
              type: array
              items:
                  type: object
                  properties:
                    _id:
                      type: string
                    datetime:
                      type: string
                    answer:
                      type: string
                    uid:
                      type: string
      payment_methods:
        type: array
        items:
          type: string
      pictures:
        type: array
        items:
          type: string
  ProductWithoutSeller:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      units:
        type: integer
        format: int64
      price:
        type: number
        format: float
      location:
        type: object
        properties:
          x: 
            type: number
            format: float
          y:
            type: number
            format: float
      categories:
        type: array
        items:
          type: string
      payment_methods:
        type: array
        items:
          type: string
      pictures:
        type: array
        items:
          type: string
  ProductReturn:
    type: object
    properties:
      _id: 
        type: string
      categories:
        type: array
        items:
          type: string
      description:
        type: string
      location:
        type: object
        properties:
          x: 
            type: number
            format: float
          y:
            type: number
            format: float
      name:
        type: string
      payment_methods:
        type: array
        items:
          type: string
      pictures:
        type: array
        items:
          type: string
      price:
        type: number
        format: float
      published:
        type: string
      seller:
        type: string
      units:
        type: integer
        format: int64
  ProductsReturn:
    type: object
    properties:
      count:
        type: integer
      result:
        type: array
        items:
          type: object
          properties:
            _id: 
              type: string
            categories:
              type: array
              items:
                type: string
            description:
              type: string
            location:
              type: object
              properties:
                x: 
                  type: number
                  format: float
                y:
                  type: number
                  format: float
            name:
              type: string
            payment_methods:
              type: array
              items:
                type: string
            pictures:
              type: array
              items:
                type: string
            price:
              type: number
              format: float
            published:
              type: string
            seller:
              type: string
            units:
              type: integer
              format: int64
  Question:
    type: object
    properties:
      question:
        type: string
  Answer:
    type: object
    properties:
      answer:
        type: string
  CategoryInput:
    type: object
    properties:
      name:
        type: string
      image:
        type: string
  Category:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      image:
        type: string
  CategoryArray:
    type: array
    items:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        image:
          type: string
  NewOrderInput:
    type: object
    properties:
      product_id:
        type: string
      units:
        type: integer
      payment_method:
        type: string
  NewOrderOutput:
    type: object
    properties:
      order_tracking_number:
        type: string

        
